import sys
input = sys.stdin.readline

# 1. 접근법 파악
# : <그리디 유형에서 나온 1로 만들기 문제와 차이점>

# [그리디 유형 문제]
# 해당 변수가 어떤 값을 가지던 간에 항상, 1을 빼는 것 보다, 나누는 작업이 더 값을 빠르게 줄일 수 있었음
# 따라서 나누어 떨어지는 경우엔, 무조건 나누면 됨

# [현재 문제]
# 현재의 최적해가 전체의 최적해라고 보장할 수 없음

# -> 그리디 유형으로 해결 불가능

# 2. DP 조건 만족 여부
# 최적 부분 구조 / 중복되는 부분 문제 만족
# -> DP 로 시도

# 3. 최소 연산 횟수 점화식
# ai = min(ai-1, ai/2, ai/3, ai/5) + 1
# (2, 3, 5로 나누는 경우 나누어 떨어질 때만 적용)

x = int(input())

d = [0] * 30001

# DP 진행
for i in range(2, x + 1):
    # 현재의 수에서 1을 빼는 경우
    # 항상 적용
    d[i] = d[i-1] + 1

    # 각각 2, 3, 5 배수 일 때만 적용
    # 2, 3, 5 공배수인 경우, 연산 횟수가 최소가 되기 위해선 제일 큰 수로 나눴어야 함
    # -> d[index] 일 때, index 에 들어 있는 수가 가장 커야 함
    if i % 2 == 0:
        # d[index] 일 때, index 에 들어 있는 수 에서의 연산 결과로 d[i] 가 나온 것 이므로, + 1
        d[i] = min(d[i], d[i // 2] + 1)
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)
    if i % 5 == 0:
        d[i] = min(d[i], d[i // 5] + 1)

print(d[x])
